{"ast":null,"code":"var _jsxFileName = \"/Users/taketaharashunsuke/upload2/src/FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageDisplay = () => {\n  _s();\n  // 画像のURLを保持するstate\n  const [imageUrl, setImageUrl] = useState('');\n  // 画像の読み込みが完了したかどうかを示すstate\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // サーバーから画像を取得する関数\n    const fetchImage = async () => {\n      try {\n        // サーバーから画像を取得するAPIエンドポイントを呼び出す\n        const response = await fetch('/process-image');\n        // レスポンスからBlobオブジェクトを取得する\n        const blob = await response.blob();\n        // Blobオブジェクトから画像のURLを生成する\n        const url = URL.createObjectURL(blob);\n        // 画像のURLをstateに設定する\n        setImageUrl(url);\n        // 画像の読み込みが完了したのでisLoadingをfalseに設定する\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching image:', error);\n        // エラーが発生した場合もisLoadingをfalseに設定する\n        setIsLoading(false);\n      }\n    };\n\n    // fetchImage関数を呼び出して画像を取得する\n    fetchImage();\n\n    // コンポーネントのアンマウント時に画像のURLを解放する\n    return () => {\n      URL.revokeObjectURL(imageUrl);\n    };\n  }, []); // 第二引数の空配列により、このEffectはマウント時のみ実行される\n\n  // isLoadingがtrueの場合はローディング中を表示、falseの場合は画像を表示\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) :\n    // 画像があれば表示\n    imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageUrl,\n      alt: \"Processed Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageDisplay, \"z21kWDuLhtMr/Sd2y4MFO0kEAhY=\");\n_c = ImageDisplay;\nexport default ImageDisplay;\nvar _c;\n$RefreshReg$(_c, \"ImageDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ImageDisplay","_s","imageUrl","setImageUrl","isLoading","setIsLoading","fetchImage","response","fetch","blob","url","URL","createObjectURL","error","console","revokeObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/taketaharashunsuke/upload2/src/FileUpload.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ImageDisplay = () => {\n  // 画像のURLを保持するstate\n  const [imageUrl, setImageUrl] = useState('');\n  // 画像の読み込みが完了したかどうかを示すstate\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // サーバーから画像を取得する関数\n    const fetchImage = async () => {\n      try {\n        // サーバーから画像を取得するAPIエンドポイントを呼び出す\n        const response = await fetch('/process-image');\n        // レスポンスからBlobオブジェクトを取得する\n        const blob = await response.blob();\n        // Blobオブジェクトから画像のURLを生成する\n        const url = URL.createObjectURL(blob);\n        // 画像のURLをstateに設定する\n        setImageUrl(url);\n        // 画像の読み込みが完了したのでisLoadingをfalseに設定する\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching image:', error);\n        // エラーが発生した場合もisLoadingをfalseに設定する\n        setIsLoading(false);\n      }\n    };\n\n    // fetchImage関数を呼び出して画像を取得する\n    fetchImage();\n\n    // コンポーネントのアンマウント時に画像のURLを解放する\n    return () => {\n      URL.revokeObjectURL(imageUrl);\n    };\n  }, []); // 第二引数の空配列により、このEffectはマウント時のみ実行される\n\n  // isLoadingがtrueの場合はローディング中を表示、falseの場合は画像を表示\n  return (\n    <div>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        // 画像があれば表示\n        imageUrl && <img src={imageUrl} alt=\"Processed Image\" />\n      )}\n    </div>\n  );\n};\n\nexport default ImageDisplay;\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,CAAC;QAC9C;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC;QACA,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;QACrC;QACAN,WAAW,CAACO,GAAG,CAAC;QAChB;QACAL,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;QACAR,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;;IAED;IACAC,UAAU,CAAC,CAAC;;IAEZ;IACA,OAAO,MAAM;MACXK,GAAG,CAACI,eAAe,CAACb,QAAQ,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEH,OAAA;IAAAiB,QAAA,EACGZ,SAAS,gBACRL,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;IAEjB;IACAlB,QAAQ,iBAAIH,OAAA;MAAKsB,GAAG,EAAEnB,QAAS;MAACoB,GAAG,EAAC;IAAiB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACxD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CA/CID,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}