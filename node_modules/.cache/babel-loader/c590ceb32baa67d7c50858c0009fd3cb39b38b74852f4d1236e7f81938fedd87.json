{"ast":null,"code":"var _jsxFileName = \"/Users/taketaharashunsuke/upload2/src/FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ImageDisplayコンポーネントのインポート\n\nconst FileUpload = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [score, setScore] = useState(null); // スコアを保持するState\n\n  const handleFileChange = event => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      setSelectedFile(files[0]);\n    }\n  };\n  const handleUpload = async () => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n      try {\n        const response = await fetch('http://localhost:3001/process-image', {\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          const scoreData = await response.json(); // スコアをJSON形式で受け取る\n          const score = scoreData.score; // JSONからスコアを取得\n          console.log('Score:', score);\n          setScore(score); // スコアをStateに設定する\n        } else {\n          console.error('Error uploading image');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected File: \", selectedFile.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), score && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"6frCXUFF/aXPYBj7rHT16Q//1hw=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","_s","selectedFile","setSelectedFile","score","setScore","handleFileChange","event","files","target","length","handleUpload","formData","FormData","append","response","fetch","method","body","ok","scoreData","json","console","log","error","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","_c","$RefreshReg$"],"sources":["/Users/taketaharashunsuke/upload2/src/FileUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport ImageDisplay from './ImageDisplay'; // ImageDisplayコンポーネントのインポート\n\nconst FileUpload: React.FC = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [score, setScore] = useState<string | null>(null); // スコアを保持するState\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      setSelectedFile(files[0]);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (selectedFile) {\n      const formData = new FormData();\n      formData.append('image', selectedFile);\n\n      try {\n        const response = await fetch('http://localhost:3001/process-image', {\n          method: 'POST',\n          body: formData\n        });\n\n        if (response.ok) {\n          const scoreData = await response.json(); // スコアをJSON形式で受け取る\n          const score = scoreData.score; // JSONからスコアを取得\n          console.log('Score:', score);\n          setScore(score); // スコアをStateに設定する\n        } else {\n          console.error('Error uploading image');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      {selectedFile && <p>Selected File: {selectedFile.name}</p>}\n      <button onClick={handleUpload}>Upload</button>\n      {/* スコアを表示 */}\n      {score && <p>Score: {score}</p>}\n    </div>\n  );\n};\n\nexport default FileUpload;\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACG;;AAE3C,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAc,IAAI,CAAC;EACnE,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEzD,MAAMS,gBAAgB,GAAIC,KAA0C,IAAK;IACvE,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAIA,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7BP,eAAe,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIT,YAAY,EAAE;MAChB,MAAMU,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEZ,YAAY,CAAC;MAEtC,IAAI;QACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;UACzC,MAAMjB,KAAK,GAAGgB,SAAS,CAAChB,KAAK,CAAC,CAAC;UAC/BkB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEnB,KAAK,CAAC;UAC5BC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;QACnB,CAAC,MAAM;UACLkB,OAAO,CAACE,KAAK,CAAC,uBAAuB,CAAC;QACxC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF,CAAC;EAED,oBACEzB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAO2B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAErB;IAAiB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAChD7B,YAAY,iBAAIH,OAAA;MAAA0B,QAAA,GAAG,iBAAe,EAACvB,YAAY,CAAC8B,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1DhC,OAAA;MAAQkC,OAAO,EAAEtB,YAAa;MAAAc,QAAA,EAAC;IAAM;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE7C3B,KAAK,iBAAIL,OAAA;MAAA0B,QAAA,GAAG,SAAO,EAACrB,KAAK;IAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA7CID,UAAoB;AAAAkC,EAAA,GAApBlC,UAAoB;AA+C1B,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}